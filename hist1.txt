   88  git commit -m "1st commit"
   89  git push
   90  cd ..
   91  cd test/
   92  git push
   93  cd ..
   94  rm -rf test/
   95  git clone ssh://admin@192.168.99.100:29418/new.git
   96  git clone ssh://admin@192.168.99.100:29418/test.git
   97  cd test/
   98  git status
   99  touch sda
  100  git add .
  101  git commit "2nd commit"
  102  git commit -m "2nd commit"
  103  git push
  104  touch sdaas
  105  git add .
  106  git commit -m "3rd commit"
  107  git push
  108  git push --help
  109  git push -v
  110  exit
  111  docker-machine.exe start def
  112  docker-machine.exe stop def
  113  exit
  114  ssh root@192.168.99.110
  115  exit
  116  pwd
  117  cd /d/gits/
  118  ls
  119  cd AWS/
  120  ls
  121  mkdir TestAwsRepos1
  122  cd TestAwsRepos1/
  123  git help
  124  git clone help
  125  git clone --help
  126  git clone https://Hiranrambabuontivillu@dev.azure.com/Hiranrambabuontivillu/DevOps2/_git/TestAWS
  127  cd ../../Azure/AzureGit/
  128  cd ../../AWS/TestAwsRepos1/
  129  git init
  130  git branch ls
  131  git branch 
  132  git branch --help
  133  git branch --list
  134  git branch -l
  135  git branch -a
  136  git branch list
  137  git flow init
  138  cd ..
  139  mkdir test123
  140  cd test123/
  141  git clone https://Hiranrambabuontivillu@dev.azure.com/Hiranrambabuontivillu/DevOps2/_git/TestAWS
  142  ls
  143  cd TestAWS/
  144  touch test123.txt
  145  git add test123.txt 
  146  git commit -m "testing"
  147  git push
  148  ls
  149  git pull
  150  ls
  151  git pull
  152  git branch dev
  153  git checkout dev 
  154  touch hello2.txt
  155  git add .
  156  ls
  157  git commit -m "he he he"
  158  git push
  159  git push .
  160  git push --set-upstream origin dev
  161  history > hist26-Dec-19.txt
  162  git add .
  163  git commit -m "history"
  164  git push
  165  cd /d/gits/AWS/
  166  ls
  167  git clone https://Hiranrambabuontivillu@dev.azure.com/Hiranrambabuontivillu/DevOps2/_git/AWS%20Bean%20Stack
  168  cd AWS%20Bean%20Stack/
  169  ls
  170  cp ../dotnet-aspmvc5-v1/ . --recursive
  171  ls
  172  cd dotnet-aspmvc5-v1/
  173  ls
  174  cd..
  175  cd ..
  176  ls
  177  git add .
  178  ls
  179  git status
  180  git add .
  181  git status
  182  git commit -m "adding the application"
  183  git status
  184  git push
  185  git status
  186  jar
  187  jar
  188  ls
  189  git status
  190  curl -X POST -H 'Content-type: application/json' --data '{"text":"Hello, World!"}' https://hooks.slack.com/services/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
  191  curl -X POST -H 'Content-type: application/json' --data '{"text":"This is from an API, to be added to Lambda!"}' https://hooks.slack.com/services/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
  192  cd /d/gits/AWS/
  193  ls
  194  mkdir lambda
  195  cd lambda/
  196  git clone https://github.com/awsdocs/aws-lambda-developer-guide
  197  aws2 --version
  198  aws2 --version
  199  dotnet tool install -g Amazon.Lambda.Tools
  200   dotnet-lambda
  201   dotnet-lambda
  202  dotnet-lambda Tool 'amazon.lambda.tools'
  203  cd D:\gits\AWS\lambda\aws-lambda-developer-guide\sample-apps\ec2-spot\test\ec2spot.Tests
  204  cd /D/gits/AWS/lambda/aws-lambda-developer-guide/sample-apps/ec2-spot/test/ec2spot.Tests
  205  dotnet test
  206  this is command
  207  cd ..
  208  cd ..
  209  cd..
  210  cd ..
  211  cd ..
  212  cd ..
  213  cd Kinesis/
  214  zip function.zip index.js
  215  aws lambda create-function --function-name ProcessKinesisRecords --zip-file fileb://function.zip --handler index.handler --runtime nodejs12.x --role arn:aws:iam::123456789012:role/lambda-kinesis-role[B
  216  aws configure
  217  $ aws lambda create-function --function-name ProcessKinesisRecords --zip-file fileb://function.zip --handler index.handler --runtime nodejs12.x --role arn:aws:iam::123456789012:role/lambda-kinesis-role
  218  aws lambda create-function --function-name ProcessKinesisRecords --zip-file fileb://function.zip --handler index.handler --runtime nodejs12.x --role arn:aws:iam::123456789012:role/lambda-kinesis-role
  219  curl -X POST -H 'Content-type: application/json' --data '{"text":"Hello, World!"}' https://hooks.slack.com/services/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
  220  docker-machine ls
  221  exit
  222  cd /d/Project/Minaly/
  223  ls
  224  vim dmgr_profile_hrb_minaly.yml 
  225  vi dmgr_profile_hrb_minaly.yml 
  226  vi dmgr_profile_hrb_minaly.yml 
  227  cd /d/gits/
  228  mkdir minaly
  229  cd minaly/
  230  git clone https://github.com/mahojase/minaly.git
  231  ls
  232  cd minaly/
  233  ls
  234  cp -rf /d/Project/Minaly/Minaly_project/* Minaly_Project/*
  235  mkdir Minaly_Project
  236  cp -rf /d/Project/Minaly/Minaly_project/* Minaly_Project/*
  237  ls
  238  cp -rf /d/Project/Minaly/Minaly_project/* Minaly_Project/
  239  ls
  240  cd Minaly_Project/
  241  ls
  242  cd ..
  243  git add Minaly_Project/*
  244  git status
  245  git commit -m "with role alike structure"
  246  git push
  247  cd /d/
  248  cd gits/
  249  mkdir sgtest
  250  cd sgtest/
  251  git clone https://github.com/hrb1989/testRepo1.git
  252  ls
  253  cd testRepo1/
  254  touch app.R
  255  ls
  256  git add app.R
  257  git commit -m "first commit"
  258  git push
  259  git sync
  260  git status
  261  git pull
  262  cat app.R 
  263  ls
  264  cd ..
  265  ls
  266  cd testRepo1/
  267  ls
  268  exit
  269  pwd
  270  cd /d/Project/
  271  cd Minaly/
  272  cd Minaly_project/
  273  ls
  274  cd ../../..
  275  cd gits/
  276  ls
  277  cd minaly/
  278  ls
  279  cd minaly/
  280  ls
  281  git sync
  282  git pull
  283  cd Minaly_Project/
  284  ls
  285  cd roles/
  286  ls
  287  cd dmgr_profile/
  288  ls
  289  ls
  290  cd ..
  291  cd ..
  292  cd ..
  293  cd ..
  294  cd minaly/
  295  ls
  296  git pull
  297  git status
  298  git add -A
  299  git status
  300  git commit -m "updated appserver and dmgr profile yml"
  301  git push
  302  git add -A
  303  git commit -m "updated test_main.yml"
  304  git push
  305  ls
  306  cd Minaly_Project/
  307  ls
  308  cd roles/
  309  ls
  310  cd ..
  311  ls
  312  cd ..
  313  ls
  314  vim SCCM\ Tasks\ for\ Ansible.txt 
  315  cp SCCM\ Tasks\ for\ Ansible.txt /d/Project/Minaly/
  316  cd ..
  317  cd ..
  318  git clone https://github.com/asciinema/asciinema.git
  319  cd asciinema/
  320  ls
  321  python3 -m asciinema --version
  322  sudo
  323  su -
  324  python -m asciinema --version
  325  ls
  326  cd asciinema/
  327  ls
  328  cd commands/
  329  ls
  330  cd ..
  331  cd ..
  332  cd ..
  333  ls
  334  cd minaly/
  335  cd minaly/
  336  git status
  337  git add -A
  338  git status
  339  git commit -m "Windows SQL YAML included"
  340  git push
  341  git status
  342  git add -A
  343  git status
  344  git commit -m "Windows SQL YAML with List included"
  345  git push
  346  git status
  347  git pull
  348  git push
  349  git status
  350  exit
  351  cd /d/gits/minaly/minaly/
  352  ls
  353  git status
  354  git logs
  355  git log
  356  git pull
  357  ls
  358  cp chef_bbt_was_v9_RHEL7\ \(002\).zip /d/Project/Minaly/
  359  cd /d/Project/Minaly/
  360  ls
  361  unzip
  362  ls
  363  unzip chef_bbt_was_v9_RHEL7\ \(002\).zip 
  364  ls
  365  cd chef_bbt_was_v9_RHEL7
  366  ls
  367  exlplorer.exe .
  368  diff recipes/was_install.rb ../chef_bbt_was_v9/recipes/was_install.rb 
  369  man diff
  370  diff --help
  371  ls
  372  cd ..
  373  ls
  374  git status
  375  cd /d/gits/minaly/minaly/
  376  ls
  377  git status
  378  git add -A
  379  git status
  380  git commit -m "new was install project"
  381  git push
  382  git status
  383  git status
  384  git pull
  385  cp Minaly_Project.zip /d/Project/Minaly/
  386  cd /d/Project/Minaly/
  387  unzip -o Minaly_Project.zip 
  388  cd Minaly_project
  389  ls
  390  ls -altr
  391  cd ..
  392  ls -altr
  393  cd Minaly_project
  394  ls -altr
  395  cd .
  396  cd ..
  397  git status
  398  cd Minaly_project
  399  cd /d/gits/minaly/minaly/
  400  ls
  401  git status
  402  git add -A
  403  git commit -m "updated the conditions"
  404  git push
  405  git add -A
  406  git commit -m "updated the vars"
  407  git push
  408  git status
  409  git add -A
  410  git commit -m "updated the was_install cmd"
  411  git push
  412  exit
  413  cd /d//gits/minaly/minaly/
  414  git status
  415  ls
  416  vim win_sql.yml 
  417  date -d "-1 day"
  418  cd /d/gits/minaly/minaly/
  419  ls
  420  git status
  421  git add win_sql.yml 
  422  git commit -m "updated sql"
  423  git push
  424  git status
  425  ping 192.168.99.103
  426  ifconfig
  427  ipconfig
  428  ping 192.168.99.103
  429  #!/bin/bash
  430  trap '[ "$?" -eq 0 ] || read -p "Looks like something went wrong in step ´$STEP´... Press any key to continue..."' EXIT
  431  #Quick Hack: used to convert e.g. "C:\Program Files\Docker Toolbox" to "/c/Program Files/Docker Toolbox"
  432  win_to_unix_path(){  	wd="$(pwd)"; 	cd "$1"; 		the_path="$(pwd)"; 	cd "$wd"; 	echo $the_path; }
  433  # This is needed  to ensure that binaries provided
  434  # by Docker Toolbox over-ride binaries provided by
  435  # Docker for Windows when launching using the Quickstart.
  436  export PATH="$(win_to_unix_path "${DOCKER_TOOLBOX_INSTALL_PATH}"):$PATH"
  437  VM=${DOCKER_MACHINE_NAME-default}
  438  DOCKER_MACHINE="${DOCKER_TOOLBOX_INSTALL_PATH}\docker-machine.exe"
  439  STEP="Looking for vboxmanage.exe"
  440  if [ ! -z "$VBOX_MSI_INSTALL_PATH" ]; then   VBOXMANAGE="${VBOX_MSI_INSTALL_PATH}VBoxManage.exe"; else   VBOXMANAGE="${VBOX_INSTALL_PATH}VBoxManage.exe"; fi
  441  BLUE='\033[1;34m'
  442  GREEN='\033[0;32m'
  443  NC='\033[0m'
  444  #clear all_proxy if not socks address
  445  if  [[ $ALL_PROXY != socks* ]]; then   unset ALL_PROXY; fi
  446  if  [[ $all_proxy != socks* ]]; then   unset all_proxy; fi
  447  if [ ! -f "${DOCKER_MACHINE}" ]; then   echo "Docker Machine is not installed. Please re-run the Toolbox Installer and try again.";   exit 1; fi
  448  if [ ! -f "${VBOXMANAGE}" ]; then   echo "VirtualBox is not installed. Please re-run the Toolbox Installer and try again.";   exit 1; fi
  449  "${VBOXMANAGE}" list vms | grep \""${VM}"\" &> /dev/null
  450  VM_EXISTS_CODE=$?
  451  set -e
  452  STEP="Checking if machine $VM exists"
  453  if [ $VM_EXISTS_CODE -eq 1 ]; then   "${DOCKER_MACHINE}" rm -f "${VM}" &> /dev/null || :;   rm -rf ~/.docker/machine/machines/"${VM}"   if [ "${HTTP_PROXY}" ]; then     PROXY_ENV="$PROXY_ENV --engine-env HTTP_PROXY=$HTTP_PROXY";   fi;   if [ "${HTTPS_PROXY}" ]; then     PROXY_ENV="$PROXY_ENV --engine-env HTTPS_PROXY=$HTTPS_PROXY";   fi;   if [ "${NO_PROXY}" ]; then     PROXY_ENV="$PROXY_ENV --engine-env NO_PROXY=$NO_PROXY";   fi;   "${DOCKER_MACHINE}" create -d virtualbox $PROXY_ENV "${VM}"; fi
  454  STEP="Checking status on $VM"
  455  VM_STATUS="$( set +e ; "${DOCKER_MACHINE}" status "${VM}" )"
  456  if [ "${VM_STATUS}" != "Running" ]; then   "${DOCKER_MACHINE}" start "${VM}";   yes | "${DOCKER_MACHINE}" regenerate-certs "${VM}"; fi
  457  STEP="Setting env"
  458  eval "$("${DOCKER_MACHINE}" env --shell=bash --no-proxy "${VM}" | sed -e "s/export/SETX/g" | sed -e "s/=/ /g")" &> /dev/null #for persistent Environment Variables, available in next sessions
  459  eval "$("${DOCKER_MACHINE}" env --shell=bash --no-proxy "${VM}")" #for transient Environment Variables, available in current session
  460  STEP="Finalize"
  461  clear
  462  cat << EOF
  463                          ##         .
  464                    ## ## ##        ==
  465                 ## ## ## ## ##    ===
  466             /"""""""""""""""""\___/ ===
  467        ~~~ {~~ ~~~~ ~~~ ~~~~ ~~~ ~ /  ===- ~~~
  468             \______ o           __/
  469               \    \         __/
  470                \____\_______/
  471  EOF
  472  echo -e "${BLUE}docker${NC} is configured to use the ${GREEN}${VM}${NC} machine with IP ${GREEN}$("${DOCKER_MACHINE}" ip ${VM})${NC}"
  473  echo "For help getting started, check out the docs at https://docs.docker.com"
  474  echo
  475  echo 
  476  #cd #Bad: working dir should be whatever directory was invoked from rather than fixed to the Home folder
  477  docker () {   MSYS_NO_PATHCONV=1 docker.exe "$@"; }
  478  export -f docker
  479  if [ $# -eq 0 ]; then   echo "Start interactive shell";   exec "$BASH" --login -i; else   echo "Start shell with command";   exec "$BASH" -c "$*"; fi
  480  docker-machine ls
  481  docker-machine stop 3004
  482  docker-machine start 3004
  483  docker-machine restart 3004
  484  docker-machine start 3004
  485  docker-machine ls
  486  docker-machine env 3004
  487  docker-machine start def
  488  docker-machine env def
  489  docker-machine regenerate-certs def
  490  docker-machine env def
  491  eval $("C:\Program Files\Docker Toolbox\docker-machine.exe" env def)
  492  docker-machine active
  493  docker image ls
  494  docker run -i tomcat
  495  docker container ls
  496  docker container inspect 90185e4808f8
  497  git
  498  git help git
  499  git help init
  500  pwd
  501  cd /d/gits/
  502  ls
  503  mkdir l&t
  504* 
  505  mkdir lt
  506  ls
  507  rm -rf l
  508  ls
  509  cd lt/
  510  ls
  511  cd /D/gits/lt1
  512  cd /D/gits/lt
  513  git init
  514  git status
  515  touch a.txt
  516  ls
  517  git status
  518  git add a.txt
  519  git status
  520  git rm --cached a.txt
  521  git status
  522  echo "Testing" >> a.txt
  523  cat a.txt 
  524  git status
  525  git add a.txt
  526  cat a.txt 
  527  git commit -m "Test a.txt"
  528  git status
  529  touch b.txt
  530  echo "Testing 2" >> b.txt
  531  git status
  532  git commit -a b.txt -m "Testing 2"
  533  git commit -a -m "Testing 2"
  534  git commit -a
  535  git add b.tct
  536  git add b.txt
  537  git commit -m "Testing 2"
  538  notepad b.txt
  539  git config -list
  540  git config --list
  541  git status
  542  git add b.txt
  543  git commit
  544  git commit -m "Testing 3"
  545  git config --list
  546  git config --help
  547  git config --global user.name "HRB"
  548  git config --list
  549  git config --global user.name "Hiran Ram Babu"
  550  git config --list
  551  vi b.txt
  552  cd ..
  553  mkdir lttest
  554  cd lttest/
  555  git clone https://github.com/hrb1989/testRepo1.git
  556  ls
  557  cd testRepo1/
  558  ls
  559  touch hrb.txt
  560  echo test >> hrb.txt
  561  git status
  562  git add hrb.txt
  563  git commit -m testing
  564  git push
  565  ls
  566  git status
  567  git pull
  568  cd ../../lt
  569  git pull
  570  git push
  571  touch c.txt
  572  echo "test" >> c.txt
  573  git add
  574  git add c.txt
  575  git status
  576  echo "diff test" >> c.txt
  577  git status
  578  git diff
  579  git commit -m "test"
  580  git status
  581  cd ../lt1/testRepo1/
  582  cd ../lttest/testRepo1/
  583  history >>hist.txt
  584  git add hist.txt
  585  git commit -m "06-May-2020 - history added"
  586  git push
  587  history >>hist1.txt
